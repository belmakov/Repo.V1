// <auto-generated />
using System;
using FaciTech.Apartment.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FaciTech.Apartment.Database.Migrations
{
    [DbContext(typeof(FaciTechContext))]
    [Migration("20190618180357_initalMigration")]
    partial class initalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Amenity");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e297c484-666d-4009-8dd6-d4eda26bae0c"),
                            CityId = new Guid("8a4f5fa0-9935-4e18-b153-cf22a2deea78"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(8613),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "North",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(9338),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        },
                        new
                        {
                            Id = new Guid("b0ab2ec4-d093-43a5-ad6b-93b94d1341ad"),
                            CityId = new Guid("8a4f5fa0-9935-4e18-b153-cf22a2deea78"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(573),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "South",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(578),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("StateId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a4f5fa0-9935-4e18-b153-cf22a2deea78"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(5275),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "Bangalore",
                            StateId = new Guid("06dbbab9-40bd-4a02-9b91-cbadbf136624"),
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(5969),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AmenityIds");

                    b.Property<string>("AssociationBankAccountNumber");

                    b.Property<string>("AssociationBankBranchAddress");

                    b.Property<string>("AssociationBankIFSC");

                    b.Property<string>("AssociationBankName");

                    b.Property<string>("AssociationName");

                    b.Property<string>("AssociationNumber");

                    b.Property<string>("BuilderName")
                        .IsRequired();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Landmark");

                    b.Property<string>("LocationLink");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("SubAreaId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Community");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.CommunityLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<Guid>("AreaId");

                    b.Property<string>("City");

                    b.Property<Guid>("CityId");

                    b.Property<string>("Community");

                    b.Property<string>("Country");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("SubArea");

                    b.Property<Guid>("SubAreaId");

                    b.HasKey("Id");

                    b.ToTable("CommunityLocation");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("Inactive");

                    b.Property<string>("LastName");

                    b.Property<string>("MobilePhone")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f95c0b64-669a-494c-9b11-1b4241a33a94"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 803, DateTimeKind.Utc).AddTicks(8348),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "India",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 803, DateTimeKind.Utc).AddTicks(9089),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.GroupRole", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRole");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.RoleFeature", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("RoleId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoleFeature");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<Guid>("CommunityId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NoOfFloors");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<Guid>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06dbbab9-40bd-4a02-9b91-cbadbf136624"),
                            CountryId = new Guid("f95c0b64-669a-494c-9b11-1b4241a33a94"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(1911),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "Karnataka",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 804, DateTimeKind.Utc).AddTicks(2612),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.SubArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AreaId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("SubArea");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19f3e783-32f5-441e-9004-c760f8d50cfc"),
                            AreaId = new Guid("b0ab2ec4-d093-43a5-ad6b-93b94d1341ad"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(2149),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "Jayanagar",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(2861),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        },
                        new
                        {
                            Id = new Guid("76887194-dbe6-42af-958f-7a8bf63a1045"),
                            AreaId = new Guid("e297c484-666d-4009-8dd6-d4eda26bae0c"),
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(4136),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Name = "Hebbal",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 805, DateTimeKind.Utc).AddTicks(4141),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2")
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<bool>("Primary");

                    b.Property<Guid>("UnitId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("UnitId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<int>("FloorNumber");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid>("OwnerContactId");

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("SectionId");

                    b.Property<string>("Specification");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SectionId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<Guid?>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Comments = "sys user record",
                            Created = new DateTime(2019, 6, 18, 18, 3, 56, 803, DateTimeKind.Utc).AddTicks(2153),
                            CreatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Inactive = false,
                            Password = "Bi4Fi6tHEiF+Cv3Jh0V0MA==",
                            Salt = "123",
                            Updated = new DateTime(2019, 6, 18, 18, 3, 56, 803, DateTimeKind.Utc).AddTicks(2985),
                            UpdatedBy = new Guid("fa1c974f-70c3-4e8f-830f-3249380972a2"),
                            Username = "system"
                        });
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("Inactive");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Area", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.City", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Community", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.SubArea", "SubArea")
                        .WithMany("Communities")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.GroupRole", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaciTech.Apartment.Database.Models.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.RoleFeature", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Feature", "Feature")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaciTech.Apartment.Database.Models.Role", "Role")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Section", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Community", "Community")
                        .WithMany("Sections")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.State", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.SubArea", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Area", "Area")
                        .WithMany("SubAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Tenant", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaciTech.Apartment.Database.Models.Unit", "Unit")
                        .WithMany("Tenants")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.Unit", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaciTech.Apartment.Database.Models.Section", "Section")
                        .WithMany("Units")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.User", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("FaciTech.Apartment.Database.Models.UserGroup", b =>
                {
                    b.HasOne("FaciTech.Apartment.Database.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FaciTech.Apartment.Database.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
