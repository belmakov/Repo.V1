// <auto-generated />
using System;
using DashBoard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DashBoard.Migrations
{
    [DbContext(typeof(AdminDatabaseContext))]
    [Migration("20190421202847_CreateCommunityDB")]
    partial class CreateCommunityDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DashBoard.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("BlockId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("IsRented");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("OwnerId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("DashBoard.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AreaName");

                    b.Property<int>("CityId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommunityId");

                    b.Property<Guid?>("PresidentId");

                    b.Property<Guid?>("SecretaryId");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("PresidentId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("DashBoard.Models.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("FileExtension");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("DashBoard.Models.AttachmentBlob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<byte[]>("Body");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("AttachmentBlobs");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Comments");

                    b.Property<Guid>("CommunityId");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("DashBoard.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName");

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("SubAreaId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SubAreaId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("DashBoard.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int?>("AddressId");

                    b.Property<Guid?>("ApartmentId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("ImageId");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ImageId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DashBoard.Models.GateKeeper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("GateKeeper");
                });

            modelBuilder.Entity("DashBoard.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApartmentName");

                    b.Property<string>("City");

                    b.Property<int?>("GateKeeperForeignKey");

                    b.Property<string>("LocationOrArea");

                    b.Property<int?>("PersonalHelperForeignKey");

                    b.Property<string>("Phone");

                    b.Property<string>("PinCode");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<int?>("VendorForeignKey");

                    b.HasKey("Id");

                    b.HasIndex("GateKeeperForeignKey")
                        .IsUnique()
                        .HasFilter("[GateKeeperForeignKey] IS NOT NULL");

                    b.HasIndex("PersonalHelperForeignKey")
                        .IsUnique()
                        .HasFilter("[PersonalHelperForeignKey] IS NOT NULL");

                    b.HasIndex("VendorForeignKey")
                        .IsUnique()
                        .HasFilter("[VendorForeignKey] IS NOT NULL");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("ApartmentId");

                    b.Property<int?>("AssociationId");

                    b.Property<int?>("AssociationId1");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<bool>("IsAssociationMember");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("AssociationId");

                    b.HasIndex("AssociationId1");

                    b.HasIndex("PersonId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DashBoard.Models.PersonalHelper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("PersonalHelper");
                });

            modelBuilder.Entity("DashBoard.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<string>("StateName");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DashBoard.Models.SubArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("AreaId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("SubAreaName");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("SubAreas");
                });

            modelBuilder.Entity("DashBoard.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatedBy");

                    b.Property<string>("Password");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid>("UpdatedBy");

                    b.Property<Guid?>("UserContactId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("UserContactId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DashBoard.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Purpose");

                    b.Property<DateTime>("Schedule");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("DashBoard.Models.Apartment", b =>
                {
                    b.HasOne("DashBoard.Models.Block", "Block")
                        .WithMany("Apartments")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DashBoard.Models.Contact", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("DashBoard.Models.Area", b =>
                {
                    b.HasOne("DashBoard.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Association", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId");

                    b.HasOne("DashBoard.Models.Member", "President")
                        .WithMany()
                        .HasForeignKey("PresidentId");

                    b.HasOne("DashBoard.Models.Member", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryId");
                });

            modelBuilder.Entity("DashBoard.Models.Block", b =>
                {
                    b.HasOne("DashBoard.Models.Community", "Community")
                        .WithMany("Blocks")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.City", b =>
                {
                    b.HasOne("DashBoard.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Community", b =>
                {
                    b.HasOne("DashBoard.Models.SubArea", "SubArea")
                        .WithMany("Communities")
                        .HasForeignKey("SubAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.Contact", b =>
                {
                    b.HasOne("DashBoard.Models.Location", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DashBoard.Models.Apartment")
                        .WithMany("Tenants")
                        .HasForeignKey("ApartmentId");

                    b.HasOne("DashBoard.Models.Attachment", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("DashBoard.Models.Location", b =>
                {
                    b.HasOne("DashBoard.Models.GateKeeper", "GateKeeper")
                        .WithOne("Address")
                        .HasForeignKey("DashBoard.Models.Location", "GateKeeperForeignKey");

                    b.HasOne("DashBoard.Models.PersonalHelper", "PersonalHelper")
                        .WithOne("ContactDetails")
                        .HasForeignKey("DashBoard.Models.Location", "PersonalHelperForeignKey");

                    b.HasOne("DashBoard.Models.Vendor", "Vendor")
                        .WithOne("Address")
                        .HasForeignKey("DashBoard.Models.Location", "VendorForeignKey");
                });

            modelBuilder.Entity("DashBoard.Models.Member", b =>
                {
                    b.HasOne("DashBoard.Models.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId");

                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("Members")
                        .HasForeignKey("AssociationId");

                    b.HasOne("DashBoard.Models.Association")
                        .WithMany("Treasurers")
                        .HasForeignKey("AssociationId1");

                    b.HasOne("DashBoard.Models.Contact", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("DashBoard.Models.SubArea", b =>
                {
                    b.HasOne("DashBoard.Models.Area", "Area")
                        .WithMany("SubAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DashBoard.Models.User", b =>
                {
                    b.HasOne("DashBoard.Models.Contact", "UserContact")
                        .WithMany()
                        .HasForeignKey("UserContactId");
                });
#pragma warning restore 612, 618
        }
    }
}
